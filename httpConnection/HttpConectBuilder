
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.imageio.ImageReader;
import javax.imageio.stream.ImageInputStream;

import org.springframework.http.MediaType;

import com.tower.interceptor.message.model.PlatformConstant;

public class HttpConnectBuilder {

	public static final String GET = "GET";
	public static final String POST = "POST";
	public static final String PUT = "PUT";
	public static final String DELETE = "DELETE";
	public static final String HEAD = "HEAD";
	public static final String OPTIONS = "OPTIONS";

	public static final String APPLICATION_JSON = "application/json;charset=UTF-8";
	public static final String APPLICATION_XML = "application/xml;charset=UTF-8";
	public static final String TEXT_PLAIN = "text/plain;charset=UTF-8";
    public static final String TEXT_XML = "text/xml;charset=UTF-8";
    public static final String TEXT_HTML = "text/html;charset=UTF-8";

	private static int DEFAULT_CONNECT_TIME_OUT = 1 * 60 * 1000;
	private static int DEFAULT_READ_TIME_OUT = 1 * 60 * 1000;
	private static String DEFAULT_METHOD = POST;
	private static String DEFAULT_CONTENT_TYPE = APPLICATION_JSON;

	private String url = null;
	private HttpURLConnection hconn = null;
	private InputStream is = null;
	private OutputStream os = null;

	public HttpConnectBuilder(String url) throws IOException {
		this(url, DEFAULT_METHOD, DEFAULT_CONTENT_TYPE, DEFAULT_CONNECT_TIME_OUT, DEFAULT_READ_TIME_OUT);
	}

	public HttpConnectBuilder(String url, String method) throws IOException {
		this(url, method, DEFAULT_CONTENT_TYPE, DEFAULT_CONNECT_TIME_OUT, DEFAULT_READ_TIME_OUT);
	}

	public HttpConnectBuilder(String url, String method, String contentType) throws IOException {
		this(url, method, contentType, DEFAULT_CONNECT_TIME_OUT, DEFAULT_READ_TIME_OUT);
	}

	public HttpConnectBuilder(String url, String method, String contentType, int connectTimeout, int readTimeout) throws IOException {
		this.url = url;
		hconn = (HttpURLConnection) new URL(url).openConnection();
		hconn.setRequestMethod(method == null ? DEFAULT_METHOD : method);
		hconn.setConnectTimeout(connectTimeout);
		hconn.setReadTimeout(readTimeout);
		hconn.setDoInput(true);
		hconn.setDoOutput(true);
		hconn.setUseCaches(false);
		if (contentType != null) {
			hconn.setRequestProperty("Content-Type", contentType);
		}
	}

	public void setConnectTimeout(int connectTimeout) {
		hconn.setConnectTimeout(connectTimeout);
	}

	public void setReadTimeout(int readTimeout) {
		hconn.setReadTimeout(readTimeout);
	}

	public void setHeader(String key, String value) {
		hconn.setRequestProperty(key, value);
	}

	public String getHeader(String key) {
		return hconn.getHeaderField(key);
	}

	public Map<String, List<String>> getHeaderFields() {
		return hconn.getHeaderFields();
	}

	public int getResponseCode() throws IOException {
		return hconn.getResponseCode();
	}
	
	public HttpURLConnection getHttpURLConnection() {
		return hconn;
	}
	
	public String sendRequest() throws IOException {
		System.out.println("\r\nHttpConnectBuilder - requestData >>> [" + url + "]\r\n");
		return receiveData(PlatformConstant.DEFAULT_CODE);
	}
	
	public String sendRequest(String data) throws IOException {
		return sendRequest(data, PlatformConstant.DEFAULT_CODE);
	}

	public String sendRequest(String data, String charset) throws IOException {
		try {
			String temp = data;
			if (temp != null && (temp.length() > PlatformConstant.LOG_MAX_SIZE)) {
				temp = temp.substring(0, PlatformConstant.LOG_MAX_SIZE) + "...";
			}
			System.out.println("\r\nHttpConnectBuilder - requestData >>> [" + url + "]" + temp + "\r\n");
			if (data != null) {
				sendData(data, charset);
			}
			return receiveData(charset);
		} finally {
			release();
		}
	}

	public String sendRequest(InputStream in) throws Exception {
		return sendRequest(in, true);
	}

	public String sendRequest(InputStream in, boolean isCloseStream) throws Exception {
		try {
			System.out.println("\r\nHttpConnectBuilder - requestData >>> [" + url + "]\r\n");
			sendData(getBytes(in, isCloseStream));
			return receiveData();
		} finally {
			release();
		}
	}

	public String sendRequest(File file) throws Exception {
		try {
			System.out.println("\r\nHttpConnectBuilder - requestData >>> [" + url + "]\r\n");
			String finalname = URLEncoder.encode(file.getName(), PlatformConstant.DEFAULT_CODE);
			String boundary = String.valueOf(System.currentTimeMillis());
			String end = "\r\n";

			StringBuffer stabuffer = new StringBuffer();
			stabuffer.append("-----").append(boundary).append(end);
			stabuffer.append("Content-Disposition: form-data; name=file; filename=").append(finalname).append(end);
			stabuffer.append("Content-Type: ").append(getContentType(file)).append(end);
			stabuffer.append(end);

			StringBuffer endbuffer = new StringBuffer();
			endbuffer.append(end).append("-----").append(boundary).append("--").append(end);

			byte[] src1 = stabuffer.toString().getBytes();
			byte[] src2 = getBytes(file);
			byte[] src3 = endbuffer.toString().getBytes();

			int len1 = src1.length;
			int len2 = src2.length;
			int len3 = src3.length;

			byte[] data = new byte[len1 + len2 + len3];

			System.arraycopy(src1, 0, data, 0, len1);
			System.arraycopy(src2, 0, data, len1, len2);
			System.arraycopy(src3, 0, data, len1 + len2, len3);

			sendData(data);

			return receiveData();
		} finally {
			release();
		}
	}

	public void sendData(String data, String charset) throws IOException {
		this.sendData(data.getBytes(charset));
	}

	public void sendData(byte[] data) throws IOException {
		os = hconn.getOutputStream();
		os.write(data, 0, data.length);
		os.flush();
		os.close();
		os = null;
	}

	public String receiveData() throws IOException {
		return receiveData(PlatformConstant.DEFAULT_CODE);
	}

	public String receiveData(String charset) throws IOException {
		is = hconn.getInputStream();
		byte[] data = getBytes(is, true);
		String ret = new String(data, charset);
		String temp = ret;
		if (temp.length() > PlatformConstant.LOG_MAX_SIZE) {
			temp = temp.substring(0, PlatformConstant.LOG_MAX_SIZE) + "...";
		}
		System.out.println("\r\nHttpConnectBuilder - receiveData >>> [" + url + "]" + temp + "\r\n");
		return ret;
	}

	private byte[] getBytes(File file) throws IOException {
		InputStream in = new FileInputStream(file);
		return getBytes(in, true);
	}

	private byte[] getBytes(InputStream in, boolean isCloseStream) throws IOException {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		byte[] buf = new byte[1024 * 8];
		int len = -1;
		while ((len = in.read(buf)) != -1) {
			out.write(buf, 0, len);
		}
		if (isCloseStream) {
			in.close();
			in = null;
		}
		return out.toByteArray();
	}

	private String getContentType(File file) throws Exception {
		// 获取文件的上传类型，图片格式为image/png,image/jpg等，非图片为application/octet-stream
		ImageInputStream imagein = ImageIO.createImageInputStream(file);
		if (imagein == null) {
			return MediaType.APPLICATION_OCTET_STREAM_VALUE;
		}
		Iterator<ImageReader> it = ImageIO.getImageReaders(imagein);
		if (!it.hasNext()) {
			imagein.close();
			return MediaType.APPLICATION_OCTET_STREAM_VALUE;
		}
		imagein.close();
		return "image/" + it.next().getFormatName().toLowerCase();
	}

	public void release() {
		try {
			if (is != null) {
				is.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			if (os != null) {
				os.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			if (hconn != null) {
				hconn.disconnect();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
