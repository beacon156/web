import com.google.common.util.concurrent.ThreadFactoryBuilder;

import java.io.Serializable;
import java.util.Random;
import java.util.concurrent.*;

public class ThreadPoolService {

    public static void main(String[] args) {
        PriorityBlockingQueue queue = new PriorityBlockingQueue();
        ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNameFormat("consumer-queue-thread-%d").build();
        ExecutorService executor = new MyThreadPoolExcutor(2, 10, 5, TimeUnit.SECONDS,
                queue, namedThreadFactory, new ThreadPoolExecutor.DiscardPolicy());
        for (int i = 0; i < 20; i++) {
            AddThread t = new AddThread(executor, i);
            t.start();
        }

    }
}

class AddThread extends Thread {
    private ExecutorService executor;
    private int num;

    public AddThread(ExecutorService executor, int num) {
        this.executor = executor;
        this.num = num;
    }

    @Override
    public void run() {
        Customer customer1 = new Customer("" + num, new Random().nextInt(10));
        AiThread a = new AiThread(customer1);
        System.out.println("提交---" + num);
        Future future = executor.submit(a);
    }
}

class Customer implements Serializable {
    private String name;
    private Integer priority;
    private String result;

    public Customer() {
    }

    public Customer(String name, Integer priority) {
        this.name = name;
        this.priority = priority;
    }

    public String getResult() {
        return result;
    }

    public void setResult(String result) {
        this.result = result;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getPriority() {
        return priority;
    }

    public void setPriority(Integer priority) {
        this.priority = priority;
    }

}

class AiThread implements Callable, Comparable<AiThread> {

    private Customer customer;

    public AiThread(Customer customer) {
        this.customer = customer;
    }

    @Override
    public int compareTo(AiThread o) {
        if (o.customer.getPriority() > customer.getPriority()) {
            return 1;
        } else if (o.customer.getPriority() < customer.getPriority()) {
            return -1;
        }
        return 0;
    }

    @Override
    public Object call() throws Exception {
        System.out.println("tern---" + customer.getName() + "-priority:" + customer.getPriority());
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        customer.setResult(String.valueOf(new Random().nextInt(10)));
        return customer;
    }
}

class MyThreadPoolExcutor extends ThreadPoolExecutor {

    public MyThreadPoolExcutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue) {
        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);
    }

    public MyThreadPoolExcutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory) {
        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);
    }

    public MyThreadPoolExcutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, RejectedExecutionHandler handler) {
        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, handler);
    }

    public MyThreadPoolExcutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {
        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);
    }

    @Override
    protected <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {
        return new ComparableFutureTask<>(runnable, value);
    }

    @Override
    protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {
        return new ComparableFutureTask<>(callable);
    }

    protected class ComparableFutureTask<V> extends FutureTask<V> implements Comparable<ComparableFutureTask<V>> {
        private Object object;

        public ComparableFutureTask(Callable<V> callable) {
            super(callable);
            object = callable;
        }

        public ComparableFutureTask(Runnable runnable, V result) {
            super(runnable, result);
            object = runnable;
        }

        @Override
        @SuppressWarnings("unchecked")
        public int compareTo(ComparableFutureTask<V> o) {
            if (this == o) {
                return 0;
            }
            if (o == null) {
                return -1;
            }
            if (object != null && o.object != null) {
                if (object.getClass().equals(o.object.getClass())) {
                    if (object instanceof Comparable) {
                        return ((Comparable) object).compareTo(o.object);
                    }
                }
            }
            return 0;
        }
    }
}
